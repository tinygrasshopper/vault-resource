#!/bin/bash

set -Eeuo pipefail

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

sources="$1"

if [ -z "$sources" ]; then
  echo "usage: $0 <path/to/sources>"
  exit 1
fi

payload="/tmp/vault-resource-request"

cat > "$payload" <&0

url=$(jq --raw-output '.source.url // ""' < "$payload")
role_id=$(jq --raw-output '.source.role_id // ""' < "$payload")
secret_id=$(jq --raw-output '.source.secret_id // ""' < "$payload")
path=$(jq --raw-output '.source.path // ""' < "$payload")
data=$(jq --raw-output '.params.data // ""' < "$payload")
tarball=$(jq --raw-output '.source.tarball // "false"' < "$payload")
ca_cert=$(jq --raw-output '.source.ca_cert // ""' < "$payload")

fail=false
if [ -z "$url" ]; then
  echo "invalid payload (missing url)"
  fail=true
fi

if [ -z "$role_id" ]; then
  echo "invalid payload (missing role_id)"
  fail=true
fi

if [ -z "$secret_id" ]; then
  echo "invalid payload (missing secret_id)"
  fail=true
fi

if [ -z "$path" ]; then
  echo "invalid payload (missing path)"
  fail=true
fi

if [ -z "$data" ]; then
  echo "invalid payload (missing data)"
  fail=true
fi

if [ "$fail" = "true" ]; then
  exit 1
fi

export VAULT_ADDR="$url"
export VAULT_FORMAT="json"

if [ -n "$ca_cert" ]; then
  echo $ca_cert > $PWD/ca.pem
  export VAULT_CAPATH="$PWD/ca.pem"
fi

token="$(
  vault write auth/approle/login role_id="$role_id" secret_id="$secret_id" | \
    jq --raw-output .auth.client_token
)"
vault login "$token" > /dev/null 2>&1

function cleanup {
    vault token revoke -self
}
trap cleanup EXIT

cd "$sources/$data"
if [ "$tarball" = true ]; then
  tar -czf ../data.tgz .
  base64 ../data.tgz > ../data.tgz.enc
  args="tarball=@../data.tgz.enc"
else
  args="$(find . -type f -print0 | \
            xargs -0 realpath --relative-to "$PWD" | \
            awk '{print $1 "=@" $1}')"
fi

vault kv put "$path" $args

value="$(vault kv get "$path" | jq .data)"

# In the future, we can support a param that takes in the version of the KV
# Engine. So if we know it is version 2, we can search for the version of the
# resource instead of creating a hash on the fly as we do here.
version="$(echo "$value" | sha256sum | awk '{print $1}')"

echo '{
  "version": {
    "hash": "'"$version"'"
  }
}' >&3
