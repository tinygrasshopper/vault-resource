#!/bin/bash

set -Eeuo pipefail

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

destination="$1"

if [ -z "$destination" ]; then
  echo "usage: $0 <path/to/destination>"
  exit 1
fi

payload="/tmp/vault-resource-request"

cat > "$payload" <&0

url=$(jq --raw-output '.source.url // ""' < "$payload")
role_id=$(jq --raw-output '.source.role_id // ""' < "$payload")
secret_id=$(jq --raw-output '.source.secret_id // ""' < "$payload")
path=$(jq --raw-output '.source.path // ""' < "$payload")
tarball=$(jq --raw-output '.source.tarball // "false"' < "$payload")
version_to_get=$(jq -r '.version.hash // ""' < "$payload")
ca_cert=$(jq --raw-output '.source.ca_cert // ""' < "$payload")

fail=false
if [ -z "$url" ]; then
  echo "invalid payload (missing url)"
  fail=true
fi

if [ -z "$role_id" ]; then
  echo "invalid payload (missing role_id)"
  fail=true
fi

if [ -z "$secret_id" ]; then
  echo "invalid payload (missing secret_id)"
  fail=true
fi

if [ -z "$path" ]; then
  echo "invalid payload (missing path)"
  fail=true
fi

if [ -z "$version_to_get" ]; then
  echo "invalid payload (missing version_to_get)"
  fail=true
fi

if [ "$fail" = "true" ]; then
  exit 1
fi

export VAULT_ADDR="$url"
export VAULT_FORMAT="json"

if [ -n "$ca_cert" ]; then
  echo "$ca_cert" > $PWD/ca.pem
  export VAULT_CAPATH="$PWD/ca.pem"
fi

token="$(
  vault write auth/approle/login role_id="$role_id" secret_id="$secret_id" | \
    jq --raw-output .auth.client_token
)"
vault login "$token" > /dev/null 2>&1

function cleanup {
    vault token revoke -self
}
trap cleanup EXIT

# We are going to ignore the version asked to retrieve and just get the
# latest. Using this format instead of `vault read $path` because it is
# supported by both kv engines.
value="$(vault kv get "$path" | jq .data)"

# In the future, we can support a param that takes in the version of the KV
# Engine. So if we know it is version 2, we can search for the version of the
# resource instead of creating a hash on the fly as we do here.
version="$(echo "$value" | sha256sum | awk '{print $1}')"

if [ "$version" != "$version_to_get" ]; then
  echo "the hash of the data does not match the version hash provided"
  exit 1
fi

cd "$destination"
if [ "$tarball" = true ]; then
  enc="$(echo "$value" | jq --join-output '.tarball')"
  if [ "$enc" != "null" ]; then
    echo "$enc" | base64 -d | tar -xzf -
  fi
else
  echo "$value" | jq --raw-output 'keys[]' | while read -r key; do
    # sanitize path
    path="$(realpath --canonicalize-missing --relative-to / "/$key")"
    mkdir -p "$(dirname "$path")"
    echo -n "$value" | jq --join-output ".[\"$key\"]" > "$path"
  done
fi

echo '{
  "version": {
    "hash": "'"$version"'"
  }
}' >&3
